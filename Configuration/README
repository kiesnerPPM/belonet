=============================================================================
TYPO3 Flow Configuration Directory
=============================================================================

This directory contains the configuration for the TYPO3 Flow framework and the
application based on it. The configuration files only contain additions and
modifications of the original configuration and therefore don't contain all
possible configuration options.

The following files play a role in the configuration system:

   Settings.yaml    Various application-level settings can be set in this file.

   Objects.yaml     Additional objects configuration, overriding the
                    configuration which was defined in the various packages.

   Routes.yaml      Provides the routing configuration for the MVC framework.

   Views.yaml       Can be used to influence resolutions of views in MVC.

   Policy.yaml      Provides the configuration for the security framework.

   Caches.yaml      Provides the configuration for the caching framework.

All of these files become active in any application context if they reside
in the main Configuration directory (the same directory where this README is
located). However, context-specific configuration may be defined in sub directories
which carry the same name as the application context. These configuration
files are loaded after the default and global configuration has been invoked.


=================================================================================
=========================Kurzanleitung Git von Max===============================
# belonet

Kurzanleitung

Erst muss Git installiert werden. Zusätzlich sollte euer Name und eure E-Mail Adresse in Git gesetzt sein.

Danach kann über die Konsole eine lokale Kopie des Repositories erzeugt werden:
```
git clone https://github.com/kiesnerPPM/belonet.git
```

Danach kann man die Dateien im Repository beliebig bearbeiten.
Wenn vereänderte Dateien hochgeladen werden sollen, müssen diese erst hinzugefügt werden:
```
git add pfad/zur/datei
```

Hinzufügen aller Dateien, die bereits getrackt werden:
```
git add -u
```

Es können auch alle Dateien hinzugefügt werden:
```
git add *
```

Danach kann ein Commit erstellt werden
```
git commit
```

Jetzt öffnet sich ein Editor, in dem eine Beschreibung des Commits eingetragen wird.

Grundregel:
* Erste Zeile: Kurzbeschreibung des Commits (<= 50 Zeichen)
* Zweite Zeile leer
* Dritte Zeile ff: Ggf. nähere Beschreibung des Commits

Änderungen hochladen:
```
git push
```

## Wichtig
* Immer die aktuelle Version des Repositories verwenden bevor man anfängt zu arbeiten!
  ```
  git pull
  ```
* Für abgetrennte Arbeiten/Issues bitte eigene Branches erstellen. Dann kommen wir uns nicht gegenseitig in die Quere.
